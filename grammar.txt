program        → declaration* EOF ;

declaration    → classDecl
               | varDecl
               | statement ;

classDecl      → "class" IDENTIFIER ( "<" IDENTIFIER )?
                 "{" function* "}" ;

varDecl        → "var" IDENTIFIER ( "=" expression )? ";"? ;

statement      → exprStmt
               | forStmt
               | ifStmt
               | tryStmt
               | printStmt
               | throwStmt
               | returnStmt
               | break
               | whileStmt 
               | block;

returnStmt     → "return" expression? ";"? ;
breakStmt     → "break" ";"? ;

forStmt        → "for" "(" foreach | classicFor ;
classicFor     → ( varDecl | exprStmt | ";" )
                 expression? ";"
                 expression? ")" statement ;
foreach        → "each" expression "as" IDENTIFIER ")" statement ;

whileStmt      → "while" expression statement ;

ifStmt         → "if" expression statement
               ( "else" statement )? ;

tryCatchStmt   → "try" statement "catch" IDENTIFIER? statement ;

block          → "{" declaration* "}" ;

object         → "{" objectValue* "}" ;
objectValue    → expression ":" expression ","? ;

exprStmt       → expression ";"? ;
printStmt      → "print" expression ";"? ;
throwStmt      → "throw" expression ";"? ;

expression     → assignment ;
assignment     → ( call "." )? IDENTIFIER "=" assignment;
ogic_or        → logic_and ( "or" logic_and )* ;
logic_and      → equality ( "and" equality )* ;
equality       → comparison ( ( "!=" | "==" ) comparison )* ;
comparison     → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term           → factor ( ( "-" | "+" ) factor )* ;
factor         → unary ( ( "/" | "*" | "**" ) unary )* ;
unary          → ( "!" | "-" ) unary | call ;
exprPropertyAccess → "[" expression "]" ;
call           → primary ( "(" arguments? ")" | "." IDENTIFIER )* | list ;
arguments      → expression ( "," expression )* ;
primary        → NUMBER | STRING | "true" | "false" | "nil"
               | "(" expression ")" | IDENTIFIER | funDecl | object
               | "super" "." IDENTIFIER | import ;
funDecl        → "fun" function | logic_or ;
import         → "import" STRING ;
function       → IDENTIFIER? "(" parameters? ")" block ;
parameters     → IDENTIFIER ( "," IDENTIFIER )* ;
list           → "[" listContent? "]" ;
listContent    → exression ( "," expression )* ;